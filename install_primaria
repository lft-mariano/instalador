#!/bin/bash

# --- Inicialização ---
tput init
TIMESTAMP=$(date +%F_%T)
LOG_DIR="/home/logs_instalacao"
mkdir -p "$LOG_DIR"

PROJECT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

echo "[$TIMESTAMP] Iniciando instalação completa..." | tee -a "$LOG_DIR/install_master.log"

# --- Função de verificação de erro ---
check_exit() {
    if [ $1 -ne 0 ]; then
        echo "ERRO: $2" | tee -a "$LOG_DIR/install_master.log"
        exit 1
    fi
}

# --- Atualização do sistema ---
echo "[$TIMESTAMP] Corrigindo apt..." | tee -a "$LOG_DIR/install_master.log"
sudo dpkg --configure -a &> "$LOG_DIR/apt_fix_$TIMESTAMP.log"
check_exit $? "Falha ao corrigir dpkg."

sudo apt-get update &> "$LOG_DIR/apt_update_$TIMESTAMP.log"
check_exit $? "Falha no apt-get update."
sudo apt-get upgrade -y &> "$LOG_DIR/apt_upgrade_$TIMESTAMP.log"
check_exit $? "Falha no apt-get upgrade."

# --- Instalar dependências básicas ---
echo "[$TIMESTAMP] Instalando dependências básicas..." | tee -a "$LOG_DIR/install_master.log"
sudo apt install -y git curl build-essential software-properties-common unzip wget &> "$LOG_DIR/deps_basic_$TIMESTAMP.log"
check_exit $? "Falha ao instalar dependências básicas."

# --- Instalar Node.js LTS ---
if ! command -v node &> /dev/null; then
    echo "[$TIMESTAMP] Instalando Node.js LTS..." | tee -a "$LOG_DIR/install_master.log"
    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - &> "$LOG_DIR/node_setup_$TIMESTAMP.log"
    check_exit $? "Falha no setup Node.js."
    sudo apt install -y nodejs &> "$LOG_DIR/node_install_$TIMESTAMP.log"
    check_exit $? "Falha ao instalar Node.js."
fi

# --- Instalar PM2 global ---
echo "[$TIMESTAMP] Instalando PM2..." | tee -a "$LOG_DIR/install_master.log"
sudo npm install -g pm2 &> "$LOG_DIR/pm2_install_$TIMESTAMP.log"
check_exit $? "Falha ao instalar PM2."

# --- Instalar Redis ---
echo "[$TIMESTAMP] Instalando Redis..." | tee -a "$LOG_DIR/install_master.log"
sudo apt install -y redis-server &> "$LOG_DIR/redis_install_$TIMESTAMP.log"
check_exit $? "Falha ao instalar Redis."

# --- Instalar Docker e Docker Compose ---
echo "[$TIMESTAMP] Instalando Docker e Docker Compose..." | tee -a "$LOG_DIR/install_master.log"
sudo apt install -y docker.io docker-compose &> "$LOG_DIR/docker_install_$TIMESTAMP.log"
check_exit $? "Falha ao instalar Docker."

# --- Puppeteer dependencies ---
echo "[$TIMESTAMP] Instalando dependências do Puppeteer..." | tee -a "$LOG_DIR/install_master.log"
sudo apt install -y gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 \
libgtk-3-0 libnspr4 libpango-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 \
libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \
ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget &> "$LOG_DIR/puppeteer_deps_$TIMESTAMP.log"
check_exit $? "Falha ao instalar dependências do Puppeteer."

# --- Snap e Certbot ---
echo "[$TIMESTAMP] Instalando Snap e Certbot..." | tee -a "$LOG_DIR/install_master.log"
sudo apt install -y snapd &> "$LOG_DIR/snapd_install_$TIMESTAMP.log"
check_exit $? "Falha ao instalar snapd."
sudo snap install core; sudo snap refresh core &> "$LOG_DIR/snap_core_$TIMESTAMP.log"
sudo snap install --classic certbot &> "$LOG_DIR/certbot_install_$TIMESTAMP.log"
check_exit $? "Falha ao instalar Certbot."

# --- Instalar Nginx ---
echo "[$TIMESTAMP] Instalando Nginx..." | tee -a "$LOG_DIR/install_master.log"
sudo apt install -y nginx &> "$LOG_DIR/nginx_install_$TIMESTAMP.log"
check_exit $? "Falha ao instalar Nginx."

# --- Configuração usuário deploy ---
if ! id "deploy" &>/dev/null; then
    echo "[$TIMESTAMP] Criando usuário deploy..." | tee -a "$LOG_DIR/install_master.log"
    sudo useradd -m -s /bin/bash deploy
    check_exit $? "Falha ao criar usuário deploy."
fi

# --- Criar arquivo config ---
if [[ ! -e "${PROJECT_ROOT}/config" ]]; then
cat << EOF > "${PROJECT_ROOT}/config"
deploy_password=${deploy_password}
mysql_root_password=${mysql_root_password}
db_pass=${db_pass}
EOF
    sudo chown root:root "${PROJECT_ROOT}/config"
    sudo chmod 700 "${PROJECT_ROOT}/config"
fi
source "${PROJECT_ROOT}/config"

# --- Clonar repositórios ---
echo "[$TIMESTAMP] Clonando repositórios..." | tee -a "$LOG_DIR/install_master.log"
if [[ ! -d "${PROJECT_ROOT}/frontend" ]]; then
    git clone https://github.com/lft-mariano/frontend.git "${PROJECT_ROOT}/frontend" &> "$LOG_DIR/frontend_clone_$TIMESTAMP.log"
    check_exit $? "Falha ao clonar frontend."
fi
if [[ ! -d "${PROJECT_ROOT}/backend" ]]; then
    git clone https://github.com/lft-mariano/backend.git "${PROJECT_ROOT}/backend" &> "$LOG_DIR/backend_clone_$TIMESTAMP.log"
    check_exit $? "Falha ao clonar backend."
fi

# --- Backend ---
cd "${PROJECT_ROOT}/backend"
echo "[$TIMESTAMP] Instalando dependências backend..." | tee -a "$LOG_DIR/install_master.log"
npm install &> "$LOG_DIR/backend_npm_$TIMESTAMP.log"
check_exit $? "Falha no npm install backend."
echo "[$TIMESTAMP] Build backend..." | tee -a "$LOG_DIR/install_master.log"
npm run build &> "$LOG_DIR/backend_build_$TIMESTAMP.log"
check_exit $? "Falha no build backend."
pm2 restart all &> "$LOG_DIR/backend_pm2_$TIMESTAMP.log"

# --- Frontend ---
cd "${PROJECT_ROOT}/frontend"
echo "[$TIMESTAMP] Instalando dependências frontend..." | tee -a "$LOG_DIR/install_master.log"
npm install &> "$LOG_DIR/frontend_npm_$TIMESTAMP.log"
check_exit $? "Falha no npm install frontend."
echo "[$TIMESTAMP] Build frontend..." | tee -a "$LOG_DIR/install_master.log"
npm run build &> "$LOG_DIR/frontend_build_$TIMESTAMP.log"
check_exit $? "Falha no build frontend."
pm2 restart all &> "$LOG_DIR/frontend_pm2_$TIMESTAMP.log"

# --- Configuração Nginx ---
echo "[$TIMESTAMP] Configurando Nginx..." | tee -a "$LOG_DIR/install_master.log"
# Criar config básico de proxy reverso
cat << EOF | sudo tee /etc/nginx/sites-available/inovar.conf
server {
    listen 80;
    server_name inovar.convochat.online apinovar.convochat.online;

    location / {
        proxy_pass http://localhost:4001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF
sudo ln -s /etc/nginx/sites-available/inovar.conf /etc/nginx/sites-enabled/
sudo nginx -t &> "$LOG_DIR/nginx_test_$TIMESTAMP.log"
check_exit $? "Falha na configuração do Nginx."
sudo systemctl restart nginx &> "$LOG_DIR/nginx_restart_$TIMESTAMP.log"

# --- Certbot SSL ---
echo "[$TIMESTAMP] Configurando SSL com Certbot..." | tee -a "$LOG_DIR/install_master.log"
sudo certbot --nginx -d inovar.convochat.online -d apinovar.convochat.online --non-interactive --agree-tos -m seu-email@dominio.com &> "$LOG_DIR/certbot_$TIMESTAMP.log"

# --- Finalização ---
echo "[$TIMESTAMP] Instalação COMPLETA com sucesso!" | tee -a "$LOG_DIR/install_master.log"
